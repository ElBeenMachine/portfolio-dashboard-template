# Update the version of the project
update_version:
    stage: version
    # Only run this job once per merge request
    rules:
        - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "production"'
          when: manual # Set to manual to ensure it's only triggered once
          allow_failure: false
    script:
        - labels=$(echo "$CI_MERGE_REQUEST_LABELS")

        # Check labels and update version accordingly (no multiline here)
        - if [[ $labels =~ "patch" ]]; then npm version patch; elif [[ $labels =~ "minor" ]]; then npm version minor; elif [[ $labels =~ "major" ]]; then npm version major; else echo "No valid version label found. Exiting."; exit 1; fi

        # Configure Git for committing and pushing changes
        - git config --global user.email "ci@mail.beenhamow.co.uk"
        - git config --global user.name "GitLab CI"

        # Commit and push version update back to the branch
        - git add package.json package-lock.json
        - git commit -m "ci: update version based on labels"
        - git push origin "$CI_COMMIT_REF_NAME"

# Get the version tag for the job
get_version:
    stage: version
    image: $NODE_IMAGE
    script:
        - export TAG=$(node -p "require('./package.json').version")
        - echo "TAG=$TAG" >> variables.env
    before_script: []
    services: []
    artifacts:
        reports:
            dotenv: variables.env
    only:
        - production
