# Define variables and default images
variables:
    NODE_IMAGE: node:alpine
    DOCKER_IMAGE: docker:24.0.5
    PROJECT_NAME: portfolio-dashboard
    GITLAB_API_URL: "https://gitlab.com/api/v4"
    GITLAB_PROJECT_ID: $CI_PROJECT_ID

# Define the stages
stages:
    - always_run
    - documentation
    - test
    - build
    - release
    - deploy
    - merge

# Always run pipeline so that when no pipeline is run, the pipeline is still created
always_run:
    stage: always_run
    script:
        - echo "This is a dummy job to ensure the pipeline is always run"
    rules:
        # Run when other requirements are not met
        - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "production" && $CI_COMMIT_BRANCH != "pre-production" && $CI_COMMIT_BRANCH !~ /^feature\/.*$/ && $CI_COMMIT_BRANCH !~ /^fix\/.*$/ && $CI_COMMIT_BRANCH !~ /^docs\/.*$/ && $CI_COMMIT_TAG == null

# Lint the code
lint_code:
    stage: test
    image: $NODE_IMAGE
    script:
        - npm install
        - npm run lint
    rules:
        - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "production" && $CI_COMMIT_BRANCH != "pre-production" && $CI_COMMIT_TAG == null

# Run unit tests
unit_tests:
    stage: test
    image: $NODE_IMAGE
    script:
        - npm install
        - npm test
    rules:
        - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "production" && $CI_COMMIT_BRANCH != "pre-production" && $CI_COMMIT_TAG == null

# Deploy the documentation
deploy_documentation:
    stage: documentation
    script:
        - echo "This is where I would deploy the documentation once configured"
    rules:
        - if: $CI_COMMIT_BRANCH == "main"
          changes:
              - ./docs/**/*

# Build the project for testing
build_project:
    stage: build
    image: $DOCKER_IMAGE
    services:
        - docker:24.0.5-dind
    script:
        - docker build -t $PROJECT_NAME:testing .
    rules:
        - if: $CI_COMMIT_BRANCH == "main"

# Merge the main branch into the pre-production branch
create_merge_request_main_to_preprod:
    stage: merge
    before_script:
        - apt-get update -y && apt-get install -y jq
    script:
        - sh .gitlab/scripts/merge-to-pre-prod.sh
    rules:
        - if: $CI_COMMIT_TAG

# Get release version
get_release_version:
    stage: release
    script:
        - export VERSION=$(git describe --tags --abbrev=0)
        - echo "VERSION=$VERSION" >> variables.env
    before_script: []
    services: []
    artifacts:
        reports:
            dotenv: variables.env
    only:
        - pre-production

# Build the project for release
build_release:
    needs:
        - job: get_release_version
          artifacts: true
    stage: release
    image: $DOCKER_IMAGE
    services:
        - docker:24.0.5-dind
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_BUILDKIT: 1
        DOCKER_CLI_EXPERIMENTAL: enabled
    before_script:
        - echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USER --password-stdin
    script:
        - export VERSION=$(git describe --tags --abbrev=0)
        - docker buildx create --use
        - docker buildx build --platform linux/amd64,linux/arm64 --build-arg VERSION=$VERSION -t $DOCKER_USER/$PROJECT_NAME:$VERSION -t $DOCKER_USER/$PROJECT_NAME:latest --push .
    rules:
        - if: $CI_COMMIT_BRANCH == "pre-production"

# Automatically generate release notes
create_release_notes:
    stage: release
    script:
        - export VERSION=$(git describe --tags --abbrev=0)
        - echo "Generating release notes for version $VERSION"
        - echo "# Changelog for version $VERSION" > release.md
        - git log --oneline $(git describe --tags --abbrev=0 || git rev-list --max-parents=0 HEAD)...HEAD | tr '\n' '\7' | sed 's/\x7/\n\n/g' >> release.md
    rules:
        - if: $CI_COMMIT_BRANCH == "pre-production"
    artifacts:
        paths:
            - release.md

# Create a release
create_release:
    needs:
        - job: create_release_notes
          artifacts: true

        - job: get_release_version
          artifacts: true

        - job: build_release
    stage: release
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    script:
        - export VERSION=$(git describe --tags --abbrev=0)
        - echo "Creating release $VERSION"
    release:
        name: Version $VERSION
        tag_name: $VERSION
        description: $(cat release.md)
        ref: $CI_COMMIT_SHA
        assets:
            links:
                - name: "Docker Image"
                  url: https://hub.docker.com/r/$DOCKER_USER/portfolio-dashboard
    rules:
        - if: $CI_COMMIT_BRANCH == "pre-production"

# Merge the main branch into the pre-production branch
create_merge_request_preprod_to_prod:
    stage: merge
    before_script:
        - apt-get update -y && apt-get install -y jq
    script:
        - sh .gitlab/scripts/merge-to-prod.sh
    rules:
        - if: $CI_COMMIT_BRANCH == "pre-production"
# TODO: Use kubernetes spec to deploy to production environment
